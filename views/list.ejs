<%- include('partials/header.ejs') %> 
<%- include('partials/navbar.ejs') %>

<body onload="sendMessage()">
    <div id="listPageLayout">
        <div id="leftHandList">
            <div>
                <p class="leftHandLabels"> FILTER BY TAGS </p>
                <div id ="menuDiv"></div>
                <button id="button" class="indivTag"></button>
                <div hidden id="tagPopupButton"> </div>
            </div>

            <div>
                <p class="leftHandLabels"> FILTER BY CATEGORY </p>
                <div id="genreDiv"></div>          
                <button id="button2" class="indivTag"></button>      
                <div hidden id="categoryPopupButton"> </div>
            </div>

            <div id="priceItems">
                <p class="leftHandLabels"> FILTER BY PRICE </p>
                <button id="freeBtn">FREE</button>
                <button id="underTen">Under $10</button>
                <button id="underFourty">Under $40</button>
                <div id="customPriceElements">
                    <input type="number" id="inputPrice" placeholder="Min $">
                    <input type="number" id="inputPriceMax" placeholder="Max $">
                    <button id="displayPriceRange" class="roomButtonText"> GO </button>
                </div>
                <button id="button3" class="indivTag"></button>      
                <div hidden id="pricePopupButton"> </div>
            </div>
            <div id="clearAllFiltersButton"></div>
        </div>

        <div id="centerList">
            <div class="gradient-background">
                <h1 id="toGrabList"> SHARED GAMES </h1>
                <div id="toGrab"></div>
                <!-- TODO: Style this to be larger. -->
                <img class="roomSeperator" src="/img/controllerSeparator.png" alt="Separator for Page">
                <h1 id="recGamesList"> RECOMMENDED GAMES </h1>
                <div id="recGames"></div>
            </div>
        </div>

        <div id="rightHandList">
            <div id="roomMembersList">
                <p class="leftHandLabels"> MEMBERS </p>
            </div>
            <p id="roomCodeList"> ROOM CODE </p>
            <!-- TODO: Placeholder Number -->
            <p id = "displayRoomNum"> </p>
            <!-- TODO: Button for copying Room Code -->
            <button id= "leave" style="background-color: red;"> Logout & Leave Room </button>
        </div>
    </div>
</body>

<script>
  const socket = io("<%= url %>");
  socket.on("connection");

  // If Tags are found, provide them a way to "remove" them.
  // For now, we'll just have a single button to clear and then reload the page.
  if (sessionStorage.getItem('tagSelection') || sessionStorage.getItem('categorySelection') || sessionStorage.getItem('priceSelection') || sessionStorage.getItem('minPriceSelection') || sessionStorage.getItem('maxPriceSelection')) {
    let tempButton = document.createElement("button");
    tempButton.setAttribute('id', 'filterClearButton');
    tempButton.innerHTML = "Clear Filters";

    tempButton.addEventListener('click', () => {
        // TODO: Ideally you'd want to just remove tagSelection or modify it based on the specific tag but for now this will work.  
        sessionStorage.setItem('tagSelection', '');
        sessionStorage.setItem('categorySelection', '');
        sessionStorage.setItem('priceSelection', '');
        sessionStorage.setItem('minPriceSelection', '');
        sessionStorage.setItem('maxPriceSelection', '');
        window.location.reload();
    });

    document.querySelector('#clearAllFiltersButton').appendChild(tempButton);
  }

// TODO: does everything need to be in sendMessage?
  const sendMessage = () => {
    let steamID = Cookies.get("steamID");
    let username = Cookies.get("username");
    let avatar = Cookies.get("avatar");
    let roomNumber = Cookies.get("roomNumber");


    function filterBySelected(event) {
        const selected = event.target.value;
        sessionStorage.setItem('tagSelection', selected);
        window.location.reload();
    }
    
    function filterBySelected2(event) {
        const selected = event.target.value;
        sessionStorage.setItem('categorySelection', selected);
        window.location.reload();
    }

    function displayPriceRange() {
        const userInputMin = document.getElementById("inputPrice").value;
        const userInputMax = document.getElementById("inputPriceMax").value;
        console.log("MIN INPUT:" + userInputMin);
        console.log("MAX INPUT: " + userInputMax);

        sessionStorage.setItem('minPriceSelection', userInputMin);
        sessionStorage.setItem('maxPriceSelection', userInputMax);
        window.location.reload();
    }

    // Triggers the generation of lists on 
    socket.emit("generate", {
      steamID: steamID,
      username: username,
      avatar: avatar,
      roomNumber: roomNumber,
      tagSelection: sessionStorage.getItem('tagSelection'),
      categorySelection: sessionStorage.getItem('categorySelection'),
      priceSelection: sessionStorage.getItem('priceSelection'),
      minPriceSelection: sessionStorage.getItem('minPriceSelection'),
      maxPriceSelection: sessionStorage.getItem('maxPriceSelection')
    });

    socket.on("finalList", (data) => {
      const roomMembers = data.roomMembers;
      const sharedGameNames = data.games;
      const ownedByWho = data.owners;
      const gameLinks = data.links;
      const gameImages = data.images;
      const gameTags = data.tags;
      const gamePrices = data.prices;
      const categories = data.categories;
      const categoryArray = categories.map((str) => str.replace(/['"] + /g, ''));

    //   console.log(roomMembers);
        const roomMembersToAppend = document.querySelector('#roomMembersList');
        for (let i = 0; i < roomMembers.length; i++) {
            const userAvatar = document.createElement('img');
            userAvatar.src = roomMembers[i][2];
            userAvatar.alt = `Icon for ${roomMembers[i][1]}`;
            roomMembersToAppend.appendChild(userAvatar);
        }

        // console.log(roomMembers.length);
    // Quickly set our room number to the page.
      let currentRoomNum = document.getElementById('displayRoomNum');
      currentRoomNum.textContent = roomNumber;

      function dropDownMenu1() {
        const menu = document.createElement("select");
        const title = document.createElement("option");
        title.disabled = true;
        title.selected = true;
        title.textContent = "Select a Category";
        menu.appendChild(title);

        for (let i = 0; i < categoryArray.length; i++){
          const option = document.createElement("option");
          option.value = categoryArray[i];
          option.setAttribute('name', "option");
          option.textContent = categoryArray[i];
          menu.appendChild(option);
        }

        let menuDiv = document.getElementById("menuDiv");
        menuDiv.appendChild(menu);

        menu.addEventListener("change", filterBySelected);
      }

      dropDownMenu1();
      let catDiv = document.getElementById("tagPopupButton");
      let tagString = sessionStorage.getItem('tagSelection');
      catDiv.appendChild(document.createTextNode(tagString));
      const button = document.getElementById("button");

      if (tagString === "") {
        button.style.display = "none";
      } else {
        button.textContent = catDiv.textContent + "  \u00D7";
      }

      button.addEventListener('click', () => {
        sessionStorage.setItem('tagSelection', '');
        window.location.reload();
      });

      function dropDownMenu2() {
        const menu = document.createElement("select");
        const title = document.createElement("option");
        const genreArray = ["Co-op", "Online Co-op","PvP","Online PvP","Cross-Platform Multiplayer",
                            "Remote Play Together","Shared/Split Screen Co-op","Shared/Split Screen PvP",
                            "LAN PvP","LAN Co-op"];
        title.disabled = true;
        title.selected = true;
        title.textContent = "Select a Genre";
        menu.appendChild(title);

        for (let i = 0; i < genreArray.length; i++) {
          const option = document.createElement("option");
          option.value = genreArray[i];
          option.setAttribute('name', "option");
          option.textContent = genreArray[i];
          menu.appendChild(option);
        }

        let menuDiv = document.getElementById("genreDiv");
        genreDiv.appendChild(menu);

        menu.addEventListener("change", filterBySelected2);
      }

      dropDownMenu2();
      
      let catDiv2 = document.getElementById("categoryPopupButton");
      let tagString2 = sessionStorage.getItem('categorySelection');
      catDiv2.appendChild(document.createTextNode(tagString2));

      const button2 = document.getElementById("button2");

      if (tagString2 === "") {
        button2.style.display = "none";
      } else {
        button2.textContent = catDiv2.textContent + "  \u00D7";
      }
      
      button2.addEventListener('click', () => {
        sessionStorage.setItem('categorySelection', '');
        window.location.reload();
      });

      // EVENT LISTENERS FOR PRICE FILTERS 
      const freeButton = document.getElementById("freeBtn");
      freeButton.addEventListener('click', () => {

        sessionStorage.setItem('priceSelection', freeButton.textContent);
        window.location.reload();
      });

      const underTen = document.getElementById("underTen");
      underTen.addEventListener('click', () => {
        sessionStorage.setItem('priceSelection', underTen.textContent);
        window.location.reload();
      });

      const underFourty = document.getElementById("underFourty");
      underFourty.addEventListener('click', () => {
        sessionStorage.setItem('priceSelection', underFourty.textContent);
        window.location.reload();
      });

    // Depending on our selected price we'll change the button styling to a different color.
      if (sessionStorage.getItem('priceSelection') == "FREE") {
        freeButton.style.color = "#B3EE11";
        freeButton.style.borderColor = "#B3EE11";
      }
      else if (sessionStorage.getItem('priceSelection') == "Under $10") {
        underTen.style.color = "#B3EE11";
        underTen.style.borderColor = "#B3EE11";
      }
      else if (sessionStorage.getItem('priceSelection') == "Under $40") {
        underFourty.style.color = "#B3EE11";
        underFourty.style.borderColor = "#B3EE11";
      }
      else {
        freeButton.style.color = "#FFFFFF";
        freeButton.style.borderColor = "#FFFFFF";
        underTen.style.color = "#FFFFFF";
        underTen.style.borderColor = "#FFFFFF";
        underFourty.style.color = "#FFFFFF";
        underFourty.style.borderColor = "#FFFFFF";
      }

      // TODO: Dollar signs on text fields. 
      const priceRange = document.getElementById("displayPriceRange");
      priceRange.addEventListener('click', () => {
        let userInputMin = document.getElementById("inputPrice").value;
        let userInputMax = document.getElementById("inputPriceMax").value;

        userInputMin = parseFloat(userInputMin).toFixed(2);
        userInputMax = parseFloat(userInputMax).toFixed(2);

        if (userInputMin > userInputMax || userInputMin == "" || userInputMax == "" || userInputMin < 0 || userInputMax < 0) {
            jSuites.notification({
                name: 'INVALID RANGE',
            });
        } else {
            sessionStorage.setItem('minPriceSelection', userInputMin);
            sessionStorage.setItem('maxPriceSelection', userInputMax);
            window.location.reload();
        }
      });

      //Display tag of user's input for price range
      let priceDiv = document.getElementById("pricePopupButton");
      let priceString1 = sessionStorage.getItem('minPriceSelection');
      let priceString2 = sessionStorage.getItem('maxPriceSelection');


      const button3 = document.getElementById("button3");

      if (priceString1 === "" || priceString2 === "") {
        button3.style.display = "none";
      } else {
        button3.textContent = "$" + priceString1 + " - $" + priceString2 + " \u00D7";
      }
      
      button3.addEventListener('click', () => {
        sessionStorage.setItem('minPriceSelection', '');
        sessionStorage.setItem('maxPriceSelection', '');
        window.location.reload();
      });

      function invertOwners(someArr) {
        let temp = [];
        for (let i = 0; i < roomMembers.length; i++) {
          temp.push(i);
        }
        return filterOut(temp, someArr);
      }

      function convertToUser(someArr) {
        let temp = ``;
        for (let i = 0; i < someArr.length; i++) {
          temp += `<img class="userIconInList" src="${roomMembers[someArr[i]][2]}" alt="Icon for ${roomMembers[someArr[i]][1]}">`;
        }
        return temp;
      }

      function filterOut(arr1, arr2) {
        const result = arr1.filter((x) => arr2.indexOf(x) == -1);
        return result;
      }

      function buildTags(tagsStringForm) {
        if (tagsStringForm != '') {
            let temp = tagsStringForm.split(',');
            let toReturn = ``;
            for (let i = 0; i < 2; i++) {
                toReturn += `<p class="gameTag"> ${temp[i]} </p>`;
            }
            return toReturn;
        } else {
            return '';
        }
      }

      function buildPrices(gamesPrices) {
        let toReturn = ``;
        if (gamesPrices[1] == null) {
            if (gamesPrices[0] == 0){
                toReturn += `<p class="normalPrice"> Free </p>`;
            } else {
                toReturn += `<p class="normalPrice"> $${gamesPrices[0]} </p>`;
            }
        } else {
            if (gamesPrices[0] == 0){
                toReturn += `<p class="normalPrice"> Free </p>`;
                toReturn += `<p class="fullPrice"> Free </p>`;
            } else {
                toReturn += `<p class="normalPrice"> $${gamesPrices[0]} </p>`;
                toReturn += `<p class="fullPrice"> $${gamesPrices[1]} </p>`;
            }
        }
        return toReturn;
      }

      let suggestDiv = document.getElementById("toGrab");
      let recommendDiv = document.querySelector("#recGames");

      // This IF is a workaround to ensure we don't get DUPLICATE games in our list.
      if (
        suggestDiv.childNodes.length === 0 &&
        recommendDiv.childNodes.length === 0
      ) {
        for (let i = 0; i < sharedGameNames.length; i++) {
            // IF the game is NOT owned by everyone, do the top case.
          let tempTag = buildTags(gameTags[i]);
          let tempPrice = buildPrices(gamePrices[i]);

          if (ownedByWho[i].length != roomMembers.length) {

            let users = convertToUser(invertOwners(ownedByWho[i]));
            // TODO: Use actual JS methods to build these items instead of hard coding strings
            recommendDiv.innerHTML += `
                <div class="gameItem">
                    <img class="gameImage" src="${gameImages[i]}" alt="Icon for ${sharedGameNames[i]}">
                    <div class="seperator">
                        <a class="gameTitle" href="${gameLinks[i]}"> ${sharedGameNames[i]} </a>
                        <div class="tagHolder">
                            ${tempTag}
                            ${tempPrice}
                        </div>
                    </div>
                    <div class="roomMembers">
                        <p class="gameMemberText"> NOT OWNED BY </>
                        <div class="roomMemberImages">
                            ${users}    
                        </div>
                    </div>
                </div>
            `;
          } else { // Case for EVERYONE in the room owns the game
            suggestDiv.innerHTML += `
                <div class="gameItem">
                    <img class="gameImage" src="${gameImages[i]}" alt="Icon for ${sharedGameNames[i]}">
                    <div class="seperator">
                        <a class="gameTitle" href="${gameLinks[i]}"> ${sharedGameNames[i]} </a>
                        <div class="tagHolder">
                            ${tempTag}
                            ${tempPrice}
                        </div>
                    </div>
                </div>
                `;
          }
        }
      }

    });
  };

  let leave = document.getElementById("leave");
  leave.addEventListener('click', function() {
    sessionStorage.clear();
    window.location.href = "/logout";
  })
</script>